apiVersion: apps/v1
kind: Deployment
metadata:
  name: campus-connect-frontend
  labels:
    app: campus-connect-frontend
  annotations:
    keel.sh/policy: "force"
    keel.sh/trigger: "poll"
    keel.sh/pollSchedule: "@every 1m"
    keel.sh/images: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: campus-connect-frontend
  template:
    metadata:
      labels:
        app: campus-connect-frontend
    spec:
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      volumes:
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-temp
          emptyDir: {}
      containers:
        - name: frontend
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          envFrom:
            - configMapRef:
                name: {{ .Values.configMap.name }}
          volumeMounts:
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-temp
              mountPath: /tmp
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            runAsGroup: 0
            capabilities:
              drop:
                - ALL
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: {{ .Values.service.port }}
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          #   failureThreshold: 3
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: {{ .Values.service.port }}
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          #   timeoutSeconds: 3
          #   failureThreshold: 3
