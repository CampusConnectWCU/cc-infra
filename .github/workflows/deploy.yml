name: Deploy to Azure Kubernetes Service

on:
  workflow_dispatch:
    inputs:
      backend_tag:
        description: "Backend image tag to deploy"
        required: true
        default: "latest"
      frontend_tag:
        description: "Frontend image tag to deploy"
        required: true
        default: "latest"
  push:
    branches: [main]
    paths:
      - "helm/**"

env:
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
  CLUSTER_NAME:     ${{ vars.CLUSTER_NAME }}
  RESOURCE_GROUP:   ${{ vars.RESOURCE_GROUP }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Install cert-manager (if needed)
        run: |
          kubectl get crd clusterissuers.cert-manager.io || \
          helm repo add jetstack https://charts.jetstack.io && \
          helm repo update && \
          helm install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.13.3 \
            --set installCRDs=true
          kubectl rollout status deployment/cert-manager -n cert-manager --timeout=120s
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=120s
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=120s

      - name: Install NGINX Ingress Controller (if needed)
        run: |
          kubectl get namespace ingress-nginx || \
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && \
          helm repo update && \
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.loadBalancerIP="${{ vars.INGRESS_IP }}"
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=120s

      - name: Deploy Shared Resources
        run: |
          helm upgrade --install shared ./helm/shared \
            --set letsencrypt.email="${{ vars.LETSENCRYPT_EMAIL }}" \
            --set domain="${{ vars.DOMAIN }}"

      - name: Deploy Backend
        run: |
          MONGO_HOST="campusconnect-prod.rzyiqr0.mongodb.net"
          MONGO_PORT="27017"
          MONGO_DB="CampusConnect-Prod"
          echo "MongoDB config: Host=$MONGO_HOST, Port=$MONGO_PORT, DB=$MONGO_DB"
          helm upgrade --install backend ./helm/backend \
            --set image.repository="${{ env.ACR_LOGIN_SERVER }}/${{ vars.BACKEND_IMAGE_NAME }}" \
            --set image.tag="${{ github.event.inputs.backend_tag }}" \
            --set redis.host="${{ vars.REDIS_HOSTNAME }}" \
            --set redis.port="6380" \
            --set redis.ssl="true" \
            --set domain="${{ vars.DOMAIN }}" \
            --set mongodb.host="$MONGO_HOST" \
            --set mongodb.port="$MONGO_PORT" \
            --set mongodb.database="$MONGO_DB" \
            --set-string secrets.mongodb_uri="${{ secrets.MONGODB_URI }}" \
            --set-string secrets.redis_key="${{ secrets.REDIS_KEY }}" \
            --set-string secrets.encryption_key="${{ secrets.ENCRYPTION_KEY }}" \
            --set-string secrets.session_secret="${{ secrets.SESSION_SECRET }}"

      - name: Deploy Frontend
        run: |
          helm upgrade --install frontend ./helm/frontend \
            --set image.repository="${{ env.ACR_LOGIN_SERVER }}/${{ vars.FRONTEND_IMAGE_NAME }}" \
            --set image.tag="${{ github.event.inputs.frontend_tag }}" \
            --set config.apiUrl="/api" \
            --set domain="${{ vars.DOMAIN }}"

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/campus-connect-backend  -n campus-connect --timeout=300s
          kubectl rollout status deployment/campus-connect-frontend -n campus-connect --timeout=300s

      - name: Wait for pods to be ready
        run: |
          kubectl wait pod -l app=campus-connect-backend  -n campus-connect --for=condition=ready --timeout=300s
          kubectl wait pod -l app=campus-connect-frontend -n campus-connect --for=condition=ready --timeout=300s

      - name: Test application endpoints
        run: |
          set -euo pipefail
          echo "=== Testing application health ==="

          # Wait up to 5 minutes for Ingress IP
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller \
              -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$INGRESS_IP" ]]; then
              echo "Ingress IP: $INGRESS_IP"
              break
            fi
            echo "Waiting for Ingress IP ($i/30)…"
            sleep 10
          done
          if [[ -z "${INGRESS_IP:-}" ]]; then
            echo "❌ Ingress IP not available"
            exit 1
          fi

          # Poll health endpoints
          for i in {1..30}; do
            FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$INGRESS_IP/")
            BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$INGRESS_IP/api/health")
            if [[ "$FRONTEND_STATUS" == "200" && "$BACKEND_STATUS" == "200" ]]; then
              echo "✅ Application health checks passed!"
              exit 0
            fi
            echo "Health not ready: frontend=$FRONTEND_STATUS backend=$BACKEND_STATUS ($i/30)"
            sleep 10
          done

          echo "❌ Application health checks failed after waiting"
          exit 1
